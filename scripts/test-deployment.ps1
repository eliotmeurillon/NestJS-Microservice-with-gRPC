# Script de test pour valider le d√©ploiement Helm

Write-Host "üß™ Test du d√©ploiement NestJS sur Minikube" -ForegroundColor Green

# Fonction pour tester l'accessibilit√© d'une URL
function Test-Url {
    param($url, $description)

    try {
        $response = Invoke-WebRequest -Uri $url -TimeoutSec 10 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ $description - OK (Status: $($response.StatusCode))" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå $description - FAILED (Status: $($response.StatusCode))" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå $description - FAILED (Error: $($_.Exception.Message))" -ForegroundColor Red
        return $false
    }
}

# V√©rifier que Minikube est d√©marr√©
Write-Host "üîç V√©rification du statut de Minikube..." -ForegroundColor Blue
$minikubeStatus = minikube status 2>$null
if ($minikubeStatus -notmatch "Running") {
    Write-Host "‚ùå Minikube n'est pas d√©marr√©" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ Minikube est d√©marr√©" -ForegroundColor Green

# V√©rifier que le d√©ploiement Helm existe
Write-Host "üîç V√©rification du d√©ploiement Helm..." -ForegroundColor Blue
$helmStatus = helm status nestjs-microservices 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Le d√©ploiement Helm 'nestjs-microservices' n'existe pas" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ D√©ploiement Helm trouv√©" -ForegroundColor Green

# V√©rifier que tous les pods sont en cours d'ex√©cution
Write-Host "üîç V√©rification du statut des pods..." -ForegroundColor Blue
$pods = kubectl get pods -l app.kubernetes.io/instance=nestjs-microservices -o jsonpath='{.items[*].status.phase}'
$podsArray = $pods -split ' '
$runningPods = $podsArray | Where-Object { $_ -eq "Running" }

if ($podsArray.Count -eq 0) {
    Write-Host "‚ùå Aucun pod trouv√©" -ForegroundColor Red
    exit 1
} elseif ($runningPods.Count -eq $podsArray.Count) {
    Write-Host "‚úÖ Tous les pods sont en cours d'ex√©cution ($($runningPods.Count)/$($podsArray.Count))" -ForegroundColor Green
} else {
    Write-Host "‚ùå Certains pods ne fonctionnent pas ($($runningPods.Count)/$($podsArray.Count))" -ForegroundColor Red
    kubectl get pods -l app.kubernetes.io/instance=nestjs-microservices
    exit 1
}

# Obtenir les informations de connexion
$minikubeIp = minikube ip
$nodePort = kubectl get service nestjs-microservices-api-gateway -o jsonpath='{.spec.ports[0].nodePort}'

Write-Host "üåê Informations de connexion:" -ForegroundColor Cyan
Write-Host "   - IP Minikube: $minikubeIp" -ForegroundColor White
Write-Host "   - Port NodePort: $nodePort" -ForegroundColor White

# Test de connectivit√© via NodePort
Write-Host "üîç Test de connectivit√© via NodePort..." -ForegroundColor Blue
$nodePortUrl = "http://$minikubeIp`:$nodePort"
$nodePortSuccess = Test-Url $nodePortUrl "API Gateway (NodePort)"

# Test de connectivit√© via Ingress (si configur√©)
Write-Host "üîç Test de connectivit√© via Ingress..." -ForegroundColor Blue
$ingressUrl = "http://nestjs-microservices.local"
$ingressSuccess = Test-Url $ingressUrl "API Gateway (Ingress)"

# V√©rifier les services
Write-Host "üîç V√©rification des services..." -ForegroundColor Blue
$services = kubectl get services -l app.kubernetes.io/instance=nestjs-microservices -o jsonpath='{.items[*].metadata.name}'
$servicesArray = $services -split ' '
Write-Host "‚úÖ Services trouv√©s: $($servicesArray -join ', ')" -ForegroundColor Green

# Afficher le r√©sum√©
Write-Host ""
Write-Host "üìä R√©sum√© des tests:" -ForegroundColor Yellow
Write-Host "   - Minikube: ‚úÖ" -ForegroundColor Green
Write-Host "   - D√©ploiement Helm: ‚úÖ" -ForegroundColor Green
Write-Host "   - Pods: $(if ($runningPods.Count -eq $podsArray.Count) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($runningPods.Count -eq $podsArray.Count) { 'Green' } else { 'Red' })
Write-Host "   - NodePort: $(if ($nodePortSuccess) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($nodePortSuccess) { 'Green' } else { 'Red' })
Write-Host "   - Ingress: $(if ($ingressSuccess) { '‚úÖ' } else { '‚ùå' })" -ForegroundColor $(if ($ingressSuccess) { 'Green' } else { 'Red' })

if ($nodePortSuccess -or $ingressSuccess) {
    Write-Host ""
    Write-Host "üéâ Le d√©ploiement semble fonctionner correctement!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üåê URLs d'acc√®s:" -ForegroundColor Cyan
    if ($nodePortSuccess) {
        Write-Host "   - NodePort: $nodePortUrl" -ForegroundColor White
    }
    if ($ingressSuccess) {
        Write-Host "   - Ingress: $ingressUrl" -ForegroundColor White
    }
} else {
    Write-Host ""
    Write-Host "‚ùå Le d√©ploiement a des probl√®mes de connectivit√©" -ForegroundColor Red
    Write-Host ""
    Write-Host "üîç Debug:" -ForegroundColor Yellow
    Write-Host "   - V√©rifiez les logs: kubectl logs -f deployment/nestjs-microservices-api-gateway" -ForegroundColor White
    Write-Host "   - V√©rifiez les pods: kubectl get pods" -ForegroundColor White
    Write-Host "   - V√©rifiez les services: kubectl get services" -ForegroundColor White
}

Write-Host ""
